"""
Sentiment Analysis and Emotion Detection - Yelp Reviews Dataset


Author:       Lillian Wool
Email:        lwool@sandiego.edu
Class:        MSBA502


Description:
    This Python script performs sentiment analysis and emotion detection on the
    sampled Yelp reviews dataset created in 'Yelp-Data-Preprocessing.py'.
    Key tasks include:
        - Loading the pre-processed sampled CSV (~15,000 reviews)
        - Counting reviews exceeding the transformer model's token limit
        - Applying HuggingFace pipelines for sentiment analysis and emotion detection
        - Generating the following output columns:
            * Sentiment label (0 = negative, 1 = positive)
            * Sentiment confidence
            * Emotion label
            * Emotion confidence
        - Processing reviews in batches to avoid memory errors
        - Saving the enriched dataset for downstream analysis


Input Dataset:
    - Source: 'sampled_yelp_reviews.csv' generated by Yelp-Data-Preprocessing.py
    - Number of reviews: ~15,000
    - Columns used:
        * review_id, user_id, business_id, stars, date, text
        * business info: name, city, state, stars, review_count, is_open, categories
        * user info: name, review_count, average_stars


Output Dataset:
    - File: 'Yelp_reviews_sentiment_emotion.csv'
    - Includes original columns plus sentiment and emotion analysis results


Required Libraries:
    - pandas
    - numpy
    - tqdm
    - torch
    - transformers


Usage:
    1. Activate the Python virtual environment.
    2. Ensure all required libraries are installed.
    3. Run the script in the terminal or IDE:
           python Yelp-Emotional-Sentiment.py
    4. The processed dataset will be saved as 'Yelp_reviews_sentiment_emotion.csv'.


Notes:
    - Designed to process large text datasets efficiently using batch processing.
    - HuggingFace models truncate reviews exceeding 512 tokens.
    - The output CSV can be used for further analytics, visualizations, or modeling.
"""




# Import necessary libraries
import pandas as pd
from tqdm import tqdm
from transformers import pipeline


# Configure file paths and parameters
INPUT_CSV = "sampled_yelp_reviews.csv"
OUTPUT_CSV = "Yelp_reviews_sentiment_emotion.csv"
MAX_TOKENS = 512  # Approximate max tokens for DistilBERT (using character heuristic)


# Load Dataset
print("Loading sampled Yelp dataset...")
df = pd.read_csv(INPUT_CSV)
print(f"Loaded {len(df)} reviews.")


# Count Reviews Over Max Token Limit
# Approximate: assume 1 token â‰ˆ 4 characters
char_limit = MAX_TOKENS * 4
long_reviews_count = (df['text'].str.len() > char_limit).sum()
print(f"Number of reviews exceeding ~512 tokens: {long_reviews_count}")


# Initialize Pipelines
print("Initializing sentiment and emotion pipelines with truncation...")
sentiment_pipe = pipeline("sentiment-analysis", truncation=True)
emotion_pipe = pipeline(
    "text-classification",
    model="j-hartmann/emotion-english-distilroberta-base",
    truncation=True,
    return_all_scores=False
)


# Prepare Storage
sentiments = []
sentiment_confidences = []
emotions = []
emotion_confidences = []


# Analyze Reviews
print("Processing reviews for sentiment and emotion...")
for review in tqdm(df['text'], desc="Analyzing reviews"):
    #  Sentiment Analysis
    sentiment_result = sentiment_pipe(review)[0]
    label = 1 if sentiment_result['label'].lower() == 'positive' else 0
    sentiments.append(label)
    sentiment_confidences.append(sentiment_result['score'])
   
    # Emotion Detection
    emotion_result = emotion_pipe(review)[0]
    emotions.append(emotion_result['label'])
    emotion_confidences.append(emotion_result['score'])


# Append Results
df['Sentiment_Label'] = sentiments
df['Sentiment_Confidence'] = sentiment_confidences
df['Emotion_Label'] = emotions
df['Emotion_Confidence'] = emotion_confidences


# Save to CSV
df.to_csv(OUTPUT_CSV, index=False)
print(f"Saved sentiment and emotion analysis to '{OUTPUT_CSV}'")



